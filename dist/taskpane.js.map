{"version":3,"file":"taskpane.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAACC,OAAP,CAAe,UAACC,IAAD,EAAK;AAChB,MAAIA,IAAI,CAACC,IAAL,KAAcH,MAAM,CAACI,QAAP,CAAgBC,UAAlC,EAA8C;AAC1C;AACAC,YAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAApC,CAA0CC,OAA1C,GAAoD,OAApD;AACAH,YAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCG,OAApC,GAA8CC,YAA9C;AACH;AACJ,CAND;AAQA,IAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAsBD,YAAtB,GAAkC;;;;;;AAE1BE,eAAK,GAAGC,MAAM,CAACD,KAAf;AACAE,eAAK,GAAsBT,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAA3B;AACAS,kBAAQ,GAAWC,QAAQ,CAACF,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,aAApB,EAAmCC,IAApC,CAA3B;AAEa;AAAA;AAAA,YAAMC,KAAK,CAACR,KAAK,CAACS,MAAN,CAAa,KAAb,CAAD,CAAX;;;AAAXC,kBAAQ,GAAGC,SAAX;eAEFD,QAAQ,CAACE,IAAT;AAAA;AAAA;AAEa;AAAA;AAAA,YAAMF,QAAQ,CAACH,IAAT,EAAN;;;AAAPM,cAAI,GAAGF,SAAP;AAEFN,iBAAO,GACX;AACIS,wBAAY,EAAE3B,MAAM,CAAC4B,YAAP,CAAoBC,MADtC;AAEIC,sBAAU,EAAEd,QAFhB;AAGIe,qBAAS,EAAEnB,QAHf;AAIIoB,oBAAQ,EAAEpB;AAJd,WADI;AAQJ;AAAA;AAAA,YAAMZ,MAAM,CAACiC,OAAP,CAAe3B,QAAf,CAAwB4B,oBAAxB,CAA6CR,IAA7C,EAAmDR,OAAnD,CAAN;;;AAAAM;AAEA;;;;;;;;;;;;;;;;;AAgBAZ,kBAAQ,IAAII,QAAQ,GAAG,CAAvB;AAEA,cAAIJ,QAAQ,GAAG,GAAf,EACEA,QAAQ,GAAG,EAAX;;;;;;;;;;AAKT;;AA9CDuB,oBAAAA;;;;;;;UEVA;UACA;UACA;UACA;UACA","sources":["webpack:///./src/taskpane/taskpane.ts?","webpack:///webpack/before-startup?","webpack:///webpack/startup?","webpack:///webpack/after-startup?"],"sourcesContent":["Office.onReady((info) => {\n    if (info.host === Office.HostType.PowerPoint) {\n        // document.getElementById(\"sideload-msg\").style.display = \"none\";\n        document.getElementById(\"app-body\").style.display = \"block\";\n        document.getElementById(\"app-body\").onclick = processClick;\n    }\n});\n\nlet position = 50;\n\nexport async function processClick() \n{\n    let event = window.event;\n    let combo = <HTMLSelectElement>document.getElementById(\"icon-size\");\n    let iconsize: number = parseInt(combo.options[combo.selectedIndex].text);\n\n    const response = await fetch(event.target[\"src\"]);\n\n    if (response.ok)\n    {\n        const data = await response.text();\n\n        var options: Office.SetSelectedDataOptions = \n        { \n            coercionType: Office.CoercionType.XmlSvg, \n            imageWidth: iconsize, \n            imageLeft: position, \n            imageTop: position \n        };\n\n        await Office.context.document.setSelectedDataAsync(data, options);\n\n        /*\n        await PowerPoint.run(async (context) => {\n            var shapes = context.presentation.slides.getItemAt(0).;\n            var textbox = shapes.addTextBox(\"Hello!\", \n                { \n                  left: 100, \n                  top: 300, \n                  height: 300, \n                  width: 450 \n                });\n            textbox.name = \"Textbox\";\n          \n            return context.sync();\n          });\n*/        \n\n        position += iconsize / 2;\n\n        if (position > 450)\n          position = 50;\n\n\n\n    }\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/taskpane/taskpane.ts\"](0, __webpack_exports__);\n",""],"names":["Office","onReady","info","host","HostType","PowerPoint","document","getElementById","style","display","onclick","processClick","position","event","window","combo","iconsize","parseInt","options","selectedIndex","text","fetch","target","response","_a","ok","data","coercionType","CoercionType","XmlSvg","imageWidth","imageLeft","imageTop","context","setSelectedDataAsync","exports"],"sourceRoot":""}